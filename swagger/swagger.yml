swagger: "2.0"
info:
  title: Zig Helm RESTful API
  description: Manage k8s Resources
  version: 1.0.0
  termsOfService: http://zhigui.com
  contact:
    email: tailinzhang1993@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /releases/:
    get:
      tags:
      - releases
      description: list all releases
      operationId: ReleaseController.List
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/commons.ListResult'
        "403":
          description: ""
    post:
      tags:
      - releases
      description: install release
      operationId: ReleaseController.Install
      parameters:
      - in: body
        name: body
        description: body content
        required: true
        schema:
          $ref: '#/definitions/commons.InstallReleaseRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/commons.ReleaseResource'
        "403":
          description: ""
  /releases/{name}:
    get:
      tags:
      - releases
      description: get a named release content
      operationId: ReleaseController.Get
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/commons.ReleaseResource'
        "403":
          description: ""
    delete:
      tags:
      - releases
      description: delete release
      operationId: ReleaseController.Delete
      responses:
        "200":
          description: '{string}  Release has been Deleted'
        "403":
          description: ""
  /repos/:
    get:
      tags:
      - repos
      description: list all repo
      operationId: RepoController.List
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/commons.ListReposResponse'
        "403":
          description: ""
    post:
      tags:
      - repos
      description: add repo
      operationId: RepoController.Add
      parameters:
      - in: body
        name: body
        description: body content
        required: true
        schema:
          $ref: '#/definitions/commons.AddRepoRequest'
      responses:
        "200":
          description: '{string} Repo has been added to your repositories'
        "403":
          description: ""
  /repos/{repo}:
    delete:
      tags:
      - repos
      description: remove repo
      operationId: RepoController.Remove
      responses:
        "200":
          description: '{string}  Repo has been removed from your repositories'
        "403":
          description: ""
  /user/:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/login:
    get:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
definitions:
  commons.AddRepoRequest:
    title: AddRepoRequest
    type: object
    properties:
      caFile:
        type: string
      certFile:
        type: string
      keyFile:
        type: string
      name:
        type: string
      noupdate:
        type: boolean
      password:
        type: string
      url:
        type: string
      username:
        type: string
  commons.InstallReleaseRequest:
    title: InstallReleaseRequest
    type: object
    properties:
      chartName:
        type: string
      chartVersion:
        type: string
      description:
        type: string
      namespace:
        type: string
      password:
        type: string
      releaseName:
        type: string
      repo:
        type: string
      username:
        type: string
      verify:
        type: boolean
  commons.ListRelease:
    title: ListRelease
    type: object
    properties:
      AppVersion:
        type: string
      Chart:
        type: string
      Name:
        type: string
      Namespace:
        type: string
      Revision:
        type: integer
        format: int32
      Status:
        type: string
      Updated:
        type: string
  commons.ListReposResponse:
    title: ListReposResponse
    type: object
    properties:
      Repo:
        type: array
        items:
          $ref: '#/definitions/repo.Entry'
  commons.ListResult:
    title: ListResult
    type: object
    properties:
      Next:
        type: string
      Releases:
        type: array
        items:
          $ref: '#/definitions/commons.ListRelease'
  commons.ReleaseResource:
    title: ReleaseResource
    type: object
    properties:
      chartIcon:
        type: string
      chartName:
        type: string
      chartVersion:
        type: string
      name:
        type: string
      namespace:
        type: string
      status:
        type: string
      updated:
        type: string
  models.Profile:
    title: Profile
    type: object
    properties:
      Address:
        type: string
      Age:
        type: integer
        format: int64
      Email:
        type: string
      Gender:
        type: string
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: string
      Password:
        type: string
      Profile:
        $ref: '#/definitions/models.Profile'
      Username:
        type: string
  repo.Entry:
    title: Entry
    type: object
tags:
- name: user
  description: |
    Operations about Users
